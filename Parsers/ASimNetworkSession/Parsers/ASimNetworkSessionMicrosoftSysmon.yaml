Parser:
  Title: Network Session Event ASIM parser for Sysmon
  Version: '0.0.1'
  LastUpdated: Oct 21, 2022
Product:
  Name: Sysmon
Normalization:
  Schema: NetworkSession
  Version: '0.2.4'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing Sysmon network session events (event 3) collected using the Event or WEF (WindowsEvent table) connectors to the ASIM Process Event normalized schema. 
ParserName: ASimNetworkSessionMicrosoftSysmon
EquivalentBuiltInParser: _ASim_NetworkSession_MicrosoftSysmon
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: | 
let parser = (disabled:bool = false) {
    // this is the parser for sysmon from Event table
  let Sysmon3_Event=(disabled:bool=false) {
    Event
 | where not(disabled)
      | where Source == "Microsoft-Windows-Sysmon" and EventID==3
      | parse-kv EventData as 
          (
          RuleName:string,
          UtcTime:datetime,
          ProcessGuid:string,
          ProcessId:string,
          Image:string,
          User:string,
          Protocol:string,
          Initiated:bool,
          SourceIsIpv6:bool,
          SourceIp:string,
          SrcHostname:string,
          SourcePort:int,
          SourcePortName:string,
          DestinationIsIpv6:bool,
          DestinationIp:string,
          DestinationHostname:string,
          DestinationPort:int,
          DestinationPortName:string
          ) 
          with (regex=@'<Data Name="(\w+)">{?([^>]*)}?</Data>')
         | extend outbound = SourcePort > DestinationPort
         | project-away EventData
};
  let Sysmon3_WindowsEvent=(disabled:bool=false){
    WindowsEvent
     | where not(disabled) 
      | where Provider == "Microsoft-Windows-Sysmon" and EventID == 3
      | extend
            RuleName = tostring(EventData.RuleName),
            UtcTime = todatetime(EventData.UtcTime),
            ProcessGuid = tostring(EventData.ProcessGuid),
            ProcessId = tostring(EventData.ProcessId),
            Image = tostring(EventData.Image),
            User = tostring(EventData.User),
            Protocol = tostring(EventData.Protocol),
            Initiated = tobool(EventData.Initiated),
            SourceIsIpv6 = tobool(EventData.SourceIsIpv6),
            SourceIp = tostring(EventData.SourceIp),
            SrcHostname = tostring(EventData.SrcHostname),
            SourcePort = toint(EventData.SourcePort),
            SourcePortName = tostring(EventData.SourcePortName),
            DestinationIsIpv6 = tobool(EventData.DestinationIsIpv6),
            DestinationIp = tostring(EventData.DestinationIp),
            DestinationHostname = tostring(EventData.DestinationHostname),
            DestinationPort = toint(EventData.DestinationPort),
            DestinationPortName = tostring(EventData.DestinationPortName)
    | extend outbound = SourcePort > DestinationPort
    | project-away EventData
};
let OutboundNetworkEvents =  union Sysmon3_Event, Sysmon3_WindowsEvent
| where outbound
| extend 
        SrcUsernameType = 'Simple',
        SrcUsername = iff(tostring(split(User, "\\")[0]) == Computer, " ", tostring(split(User, "\\")[1])),
        SrcProcessId = toint(ProcessId), 
        SrcProcessGuid = tostring(split(split(ProcessGuid, "{")[-1], "}")[0]),
        SrcProcessName = Image
| project-away outbound, ProcessId, ProcessGuid, Image
;
let InboundNetworkEvents =  union Sysmon3_Event, Sysmon3_WindowsEvent
| where not(outbound)
| extend 
        DstUsernameType = 'Simple',
        DstUsername = iff(tostring(split(User, "\\")[0]) == Computer, " ", tostring(split(User, "\\")[1])),
        DstProcessId = toint(ProcessId), 
        DstProcessGuid = ProcessGuid,
        DstProcessName = Image
| project-away outbound, ProcessId, ProcessGuid, Image
;
union InboundNetworkEvents,OutboundNetworkEvents
        | project-rename 
            EventStartTime = UtcTime,
            Dvc = Computer,
            Hostname = DestinationHostname,
            IpAddr = SourceIp,
            Dst = DestinationIp,
            DstPortNumber = DestinationPort,
            SrcPortNumber = SourcePort,
            NetworkRuleName = RuleName
        | extend 
            EventEndTime = EventStartTime,
            DstHostname = Hostname,
            Src = IpAddr,
            DvcHostname = Dvc,
            DvcIpAddr = IpAddr,
            SrcIpAddr = IpAddr,
            DstIpAddr = Dst,
            EventType = 'EndpointNetworkSession',
            EventCount = int(1),
            EventVendor = 'Microsoft',
            EventSchemaVersion = '0.2.4',
            EventSchema = 'NetworkSession', 
            EventProduct = 'Sysmon for Windows',
            EventResult = 'Success',
            EventSeverity = 'Informational',
            DvcOs = 'Windows',
            Protocol = toupper(Protocol),
            EventOriginalType = '3' // Set with a constant value to avoid parsing
        | extend // aliases
            DvcDomain = iff(tostring(split(User, "\\")[0]) == Dvc, " ", tostring(split(User, "\\")[0])),
            SrcDomain = iff(tostring(split(User, "\\")[0]) == Dvc, " ", tostring(split(User, "\\")[0])),
            DvcDomainType = "Windows",
            SrcDomainType = "Windows",
            ASimMatchingHostname = "Both",
            ASimMatchingIpAddr = "Both",
            NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), "IPV6", "IPV4"),
            EventOriginalUid = iff(isnotempty(EventOriginId), EventOriginId, "N/A"),
            NetworkProtocol = Protocol
      | project-away 
      AzureDeploymentID,
      Channel,
      Data,
      Destination*,
      Initiated,
      MG,
      ManagementGroupName,
      Message,
      ParameterXml,
      UserName,
      TenantId,
      Task,
      Protocol,
      Provider,
      RawEventData,
      RenderedDescription,
      Role,
      Source*,
      _ResourceId
    };
    parser (disabled=disabled)
